version: '3.8'

services:
  # MQTT Broker - Eclipse Mosquitto
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: gateway-test-mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 10s
      timeout: 5s
      retries: 3

  # InfluxDB - 时序数据库用于存储测试数据
  influxdb:
    image: influxdb:2.7
    container_name: gateway-test-influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=gateway_test
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=testpass123
      - INFLUXDB_USER=gateway
      - INFLUXDB_USER_PASSWORD=gateway123
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - ./config/influxdb-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Mock PLC Server - 模拟Modbus设备
  mock-plc:
    image: python:3.11-slim
    container_name: gateway-test-mock-plc
    ports:
      - "1502:502"
      - "8080:8080"   # Control API
    volumes:
      - ./mock-plc:/app
    working_dir: /app
    command: sh -c "pip install -r requirements.txt && python modbus_simulator.py"
    restart: unless-stopped
    depends_on:
      - mqtt-broker
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(); s.connect(('localhost', 502)); s.close()"]
      interval: 15s
      timeout: 5s
      retries: 5

  # Redis - 用于测试缓存和状态管理
  redis:
    image: redis:7.0-alpine
    container_name: gateway-test-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Grafana - 监控面板 (可选)
  grafana:
    image: grafana/grafana:10.1.0
    container_name: gateway-test-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-influxdb-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - influxdb

  # Prometheus - 指标收集
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: gateway-test-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # 网络故障模拟器 - 用于测试网络断连恢复
  toxiproxy:
    image: ghcr.io/shopify/toxiproxy:2.5.0
    container_name: gateway-test-toxiproxy
    ports:
      - "8474:8474"    # API port
      - "21883:21883"  # Proxied MQTT port
    volumes:
      - ./config/toxiproxy.json:/etc/toxiproxy.json:ro
    restart: unless-stopped

volumes:
  influxdb-data:
  redis-data:
  grafana-data:
  prometheus-data:

networks:
  default:
    name: gateway-test-network
    driver: bridge